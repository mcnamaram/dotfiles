#!/usr/bin/env bash

# kubectl
_kpow() {
  local SEARCH=${1:-'/'}
  kubectl get po -owide --field-selector status.phase!=Succeeded | grep "$SEARCH"
}

kapow() {
  local SEARCH=${1:-'/'}
  kubectl get po -owide | grep "$SEARCH"
}

kpodversions() {
  kubectl get pods --field-selector status.phase!=Succeeded -o json | {
    echo "NAMESPACE,NAME,NODE,STATUS,CONTAINER,IMAGE,TAG"
    jq -r -c '
      .items[] |
      {
        namespace: .metadata.namespace,
        name: .metadata.name,
        node: .spec.nodeName,
        status: .status.phase,
        data: .spec.containers[]
      } |
      {
        namespace: .namespace,
        name: .name,
        node: .node,
        status: .status,
        container: [.data.name,.data.image|split(":")[0]] | join(","),
        tag: .data.image|split(":")[1]
      } |
      [.namespace, .name, .node, .status, .container, .tag ] | @csv
    '
  } | column -t -s,
}

kapodversions() {
  kubectl get pods -o json | {
    echo "NAMESPACE,NAME,NODE,STATUS,CONTAINER,IMAGE,TAG"
    jq -r -c '
      .items[] |
      {
        namespace: .metadata.namespace,
        name: .metadata.name,
        node: .spec.nodeName,
        status: .status.phase,
        data: .spec.containers[]
      } |
      {
        namespace: .namespace,
        name: .name,
        node: .node,
        status: .status,
        container: [.data.name,.data.image|split(":")[0]] | join(","),
        tag: .data.image|split(":")[1]
      } |
      [.namespace, .name, .node, .status, .container, .tag ] | @csv
    '
  } | column -t -s,
}

kapodvershort() {
  kubectl get pods -o json | {
    echo "NAME,CONTAINER,TAG"
    jq -r -c '
      .items[] |
      {
        name: .metadata.name,
        data: .spec.containers[]
      } |
      {
        name: .name,
        container: .data.name,
        tag: .data.image|split(":")[1]
      } |
      [.name, .container, .tag ] | @csv
    '
  } | column -t -s,
}

# Function to clean up failed pods in all namespaces (uncomment to use)
# kcleanup() {
#   for x in $(kubectl get namespace -o=custom-columns=name:.metadata.name --no-headers); do
#     for y in $(kubectl -n "$x" get po --field-selector=status.phase=Failed -o name); do
#       kubectl delete -n "$x" "$y";
#     done;
#   done
# }

# port forward to a service. need service name and ports
kforward() {
  local SERVICE=$1
  local LOCAL_PORT=$2
  local REMOTE_PORT=${3:-$2}
  local NAMESPACE=$4
  local NS=""

  if [[ -n "$NAMESPACE" ]]; then
    NS="-n $NAMESPACE"
  fi

  local POD=$(kubectl $NS get po | grep "$SERVICE" | awk '{print $1}')
  if [ -z "$POD" ]; then
    echo "Error: No pod found for service '$SERVICE' in namespace '$NAMESPACE'."
    return 1
  fi

  echo "Forwarding $POD to $LOCAL_PORT"
  kubectl $NS port-forward "$POD" "$LOCAL_PORT:$REMOTE_PORT"
}

ministart() {
  minikube start --disk-size='120g' --memory='10g' --cpus=8 &&
    eval $(minikube docker-env) &&
    source "$HOME/dev/secrets/minisetup.sh"
}

# Minikube stop and delete function
minidie() {
  eval $(minikube docker-env -u) &&
    minikube delete
}
