#!/usr/bin/env bash

# bash

if is-executable brew; then
  BREW_PREFIX=$(brew --prefix)

  if [ -f "$BREW_PREFIX/etc/bash_completion.d/aws_bash_completer" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/aws_bash_completer"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/brew" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/brew"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/complete.sh" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/complete.sh"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/docker" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/docker"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/docker-compose" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/docker-compose"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/git-completion.bash" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/git-completion.bash"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/git-extras" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/git-extras"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/git-prompt.sh" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/git-prompt.sh"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/kubectx" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/kubectx"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/kubens" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/kubens"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/pandoc" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/pandoc"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/prlctl" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/prlctl"
  fi
  if [ -f "$BREW_PREFIX/etc/bash_completion.d/prlsrvctl" ]; then
    source "$BREW_PREFIX/etc/bash_completion.d/prlsrvctl"
  fi
  source "$BREW_PREFIX/share/bash-completion/bash_completion"
  unset BREW_PREFIX
fi

# Dotfiles

_dotfiles_completions() {
  local cur="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -W 'clean dock edit help macos test update' -- $cur ) );
}

complete -o default -F _dotfiles_completions dotfiles

# nvm

if [ -s "$NVM_DIR/bash_completion" ]; then
  . "$NVM_DIR/bash_completion"
fi

# kube related

(which minikube > /dev/null) && source <(minikube completion bash)

(which kubectl > /dev/null) && source <(kubectl completion bash)

(which helm > /dev/null) && source <(helm completion bash)


# npm (https://docs.npmjs.com/cli/completion)

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
